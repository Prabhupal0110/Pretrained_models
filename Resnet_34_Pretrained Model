import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import torchvision
from torchvision import datasets, models, transforms

transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], 
                             [0.229, 0.224, 0.225])
    ])
train_set = datasets.ImageFolder("data/data",transform)
val_set   = datasets.ImageFolder("data/data",transform)
  
train_loader = torch.utils.data.DataLoader(train_set, batch_size=4,
                                       shuffle=True, num_workers=4)
val_loader = torch.utils.data.DataLoader(val_set, batch_size=4,  
                                       shuffle=True, num_workers=4)
classes = train_set.classes
device = torch.device("cuda:0" if torch.cuda.is_available()
                               else "cpu")
                               
model = models.resnet34(pretrained=True)
#for param in model.parameters():
#    param.requires_grad = False

ct = 25
for child in model.children():
    if ct < 34:
        for param in child.parameters():
            param.requires_grad = False
            ct = ct+1

    
for child in model.children():
    print(child)      
    
num_ftrs = model.fc.in_features
print(model.fc.in_features)
print(model.fc)
model.fc = nn.Linear(num_ftrs, 2)
print(model.fc)
model = model.to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

num_ftrs = model.fc.in_features
print(model.fc.in_features)
print(model.fc)
model.fc = nn.Linear(num_ftrs, 2)
print(model.fc)
model = model.to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

PATH = '.pretrained_25_30.pth'
torch.save(model.state_dict(), PATH)

from PIL import Image
from tqdm import tqdm
import os
import cv2
import matplotlib.pyplot as plt
model.eval()
def predict(image_path, model):
    image = Image.open(image_path)
    image_tensor = transform(image)
    image_tensor = image_tensor.unsqueeze(0)
    image_tensor = image_tensor.to(device)
    output = model(image_tensor)
    index = output.argmax().item()
    plt.figure()
    if index == 0:
        str_label='Not Successful'
        print((torch.squeeze(output)).detach().numpy(),)
        plt.title(str_label)
    else:
        str_label='Succesful'
        print((torch.squeeze(output)).detach().numpy())
        plt.title(str_label)
        
    smooth_img = cv2.imread(image_path)
    #print(len(training_data))
    
    plt.imshow(smooth_img.astype(np.uint8))
    
    return str_label

        
    #smooth_img = cv2.imread(image_path)
    #print(len(training_data))
    
    
#predict(img_name,model)
folder = "data/test"
for img in tqdm(os.listdir(folder)):
    path = os.path.join(folder,img)
    print(path)
    smooth_img = cv2.imread(path)
    #print(len(training_data))
    predict(path,model)
